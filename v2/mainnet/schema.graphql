type Assetsourceupdated @entity {
  id: ID!
  asset: Bytes!
  source: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Fallbackoracleupdated @entity {
  id: ID!
  fallbackOracle: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Ownershiptransferred @entity {
  id: ID!
  previousOwner: Bytes!
  newOwner: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Wethset @entity {
  id: ID!
  weth: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Abichanged @entity {
  id: ID!
  node: Bytes!
  contentType: BigInt!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Addrchanged @entity {
  id: ID!
  node: Bytes!
  a: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Addresschanged @entity {
  id: ID!
  node: Bytes!
  coinType: BigInt!
  newAddress: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Authorisationchanged @entity {
  id: ID!
  node: Bytes!
  owner: Bytes!
  target: Bytes!
  isAuthorised: Boolean!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Contenthashchanged @entity {
  id: ID!
  node: Bytes!
  hash: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Dnsrecordchanged @entity {
  id: ID!
  node: Bytes!
  name: Bytes!
  resource: Int!
  record: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Dnsrecorddeleted @entity {
  id: ID!
  node: Bytes!
  name: Bytes!
  resource: Int!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Dnszonecleared @entity {
  id: ID!
  node: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Dnszonehashchanged @entity {
  id: ID!
  node: Bytes!
  lastzonehash: Bytes!
  zonehash: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Interfacechanged @entity {
  id: ID!
  node: Bytes!
  interfaceID: Bytes!
  implementer: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Namechanged @entity {
  id: ID!
  node: Bytes!
  name: String!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Pubkeychanged @entity {
  id: ID!
  node: Bytes!
  x: Bytes!
  y: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Textchanged @entity {
  id: ID!
  node: Bytes!
  indexedKey: String!
  key: String!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Aggregatorupdated @entity {
  id: ID!
  token: Bytes!
  aggregator: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Addressesproviderregistered @entity {
  id: ID!
  newAddress: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Addressesproviderunregistered @entity {
  id: ID!
  newAddress: Bytes!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}

type Swapped @entity {
  id: ID!
  fromAsset: Bytes!
  toAsset: Bytes!
  fromAmount: BigInt!
  receivedAmount: BigInt!
  evtBlockTime: BigInt!
  evtBlockNum: BigInt!
  contractAddress: Bytes!
}
